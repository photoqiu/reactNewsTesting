OpenGL 中文解析：
https://github.com/omni360/LearnOpenGL-CN

Three.js源代码解析：
https://github.com/omni360/ThreeJS-Notes

Geometry
立方体
虽然这一形状的名字叫立方体（CubeGeometry），但它其实是长方体，也就是长宽高可以设置为不同的值。其构造函数是：
THREE.CubeGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)
这里，width是x方向上的长度；height是y方向上的长度；depth是z方向上的长度；
后三个参数分别是在三个方向上的分段数，如widthSegments为3的话，代表x方向上水平分为三份。
一般情况下不需要分段的话，可以不设置后三个参数，后三个参数的缺省值为1。
注意：这个分段是对六个面进行分段，而不是对立方体的体素分段，因此在立方体的中间是不分段的，只有六个侧面被分段。


平面
这里的平面（PlaneGeometry）其实是一个长方形，而不是数学意义上无限大小的平面。其构造函数为：
THREE.PlaneGeometry(width, height, widthSegments, heightSegments)
其中，width是x方向上的长度；height是y方向上的长度；后两个参数同样表示分段。如果需要创建的平面在x轴和z轴所在的平面内，可以通过物体的旋转来实现

球体
球体（SphereGeometry）的构造函数是：
THREE.SphereGeometry(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength)
其中，radius是半径；segmentsWidth表示经度上的切片数；segmentsHeight表示纬度上的切片数；phiStart表示经度开始的弧度；phiLength表示经度跨过的弧度；thetaStart表示纬度开始的弧度；thetaLength表示纬度跨过的弧度。

分段
segmentsWidth相当于经度被切成了几瓣，而segmentsHeight相当于纬度被切成了几层。
因为在图形底层的实现中，并没有曲线的概念，曲线都是由多个折线近似构成的。对于球体而言，当这两个值较大的时候，形成的多面体就可以近似看做是球体了
经度弧度
new THREE.SphereGeometry(3, 8, 6, Math.PI / 6, Math.PI / 3)
表示起始经度为Math.PI / 6，经度跨度为Math.PI / 3,需要注意的是，这里segmentsWidth为8意味着对于经度从Math.PI / 6跨过Math.PI / 3的区域内划分为8块，而不是整个球体的经度划分成8块后再判断在此经度范围内的部分

圆形
圆形（CircleGeometry）可以创建圆形或者扇形，其构造函数是：
THREE.CircleGeometry(radius, segments, thetaStart, thetaLength)

圆柱体
圆柱体（CylinderGeometry）的构造函数是：
THREE.CylinderGeometry(radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded)
其中，radiusTop与radiusBottom分别是顶面和底面的半径，由此可知，当这两个参数设置为不同的值时，实际上创建的是一个圆台；height是圆柱体的高度；radiusSegments与heightSegments可类比球体中的分段；openEnded是一个布尔值，表示是否没有顶面和底面，缺省值为false，表示有顶面和底面。

标准圆柱体
new THREE.CylinderGeometry(2, 2, 4, 18, 3)
创建一个顶面与底面半径都为2，高度为4的圆柱体

正四面体、正八面体，正十二面体
正四面体（TetrahedronGeometry）、正八面体（OctahedronGeometry）、正二十面体（IcosahedronGeometry）的构造函数较为类似，分别为：
THREE.TetrahedronGeometry(radius, detail)
THREE.OctahedronGeometry(radius, detail)
THREE.IcosahedronGeometry(radius, detail)
其中，radius是半径；detail是细节层次（Level of Detail）的层数，对于大面片数模型，可以控制在视角靠近物体时，显示面片数多的精细模型，而在离物体较远时，显示面片数较少的粗略模型，一般可以对这个值缺省。

圆环面
圆环面（TorusGeometry）就是甜甜圈的形状，其构造函数是：
THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments, arc)
其中，radius是圆环半径；tube是管道半径；radialSegments与tubularSegments分别是两个分段数；arc是圆环面的弧度，缺省值为Math.PI * 2

圆环节
如果说圆环面是甜甜圈，那么圆环结（TorusKnotGeometry）就是打了结的甜甜圈，其构造参数为：
THREE.TorusKnotGeometry(radius, tube, radialSegments, tubularSegments, p, q, heightScale)
heightScale是在z轴方向上的缩放


拉伸几何体是什么
拉伸是指我们有一个二维图形，通过针对这个二维图形进行z轴拉伸，将它转换成三维图形。例如，如果我们拉伸THREE.CircleGeometry，就会得到一个类似圆柱体的图形；如果我们拉伸THREE.PlaneGeometry，就会得到一个立方体。下面我们介绍一下常用的THREE.ExtrudeGeometry

THREE.ExtrudeGeometry简介
THREE.ExtrudeGeometry可以从一个二维图形创建出一个三维图形。

简单使用
var geometry = new THREE.ExtrudeGeometry(shapes, options);
shapes拉伸几何体需要提供一个或多个图形（THREE.Shape对象）。请看上一节
options就是一写可以配置THREE.ExtrudeGeometry配置项，相关配置有：